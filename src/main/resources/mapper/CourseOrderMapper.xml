<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simon.basics.dao.CourseOrderMapper">
    <resultMap id="BaseResultMap" type="com.simon.basics.model.CourseOrder">
        <id column="order_id" property="orderId" jdbcType="BIGINT"/>
        <result column="order_no" property="orderNo" jdbcType="VARCHAR"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="account_id" property="accountId" jdbcType="BIGINT"/>
        <result column="order_status" property="orderStatus" jdbcType="CHAR"/>
        <result column="order_cost" property="orderCost" jdbcType="DECIMAL"/>
        <result column="order_pay_status" property="orderPayStatus" jdbcType="CHAR"/>
        <result column="order_pay_way" property="orderPayWay" jdbcType="VARCHAR"/>
        <result column="order_pay_time" property="orderPayTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="course_total" property="courseTotal" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="UnionResultMap" type="com.simon.basics.model.CourseOrderWithBLOBs" extends="BaseResultMap">
        <result column="chooseSeat" property="chooseSeat" jdbcType="BIT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="parent_name" property="parentName" jdbcType="VARCHAR" />
        <result column="sex" property="sex" jdbcType="CHAR" />
        <result column="age" property="age" jdbcType="INTEGER" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="seat_id" property="seatId" jdbcType="BIGINT"/>

        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="course_cost" property="courseCost" jdbcType="DOUBLE"/>
    </resultMap>
    <sql id="Base_Column_List">
    order_id, order_no, course_id, account_id, order_status, order_cost, order_pay_status, order_pay_way,course_total,
    create_time,order_pay_time, update_time
  </sql>

    <sql id="Union_Column_List">
      co.order_id, co.order_no, co.course_id, co.account_id, co.order_status, co.order_cost, co.order_pay_status,co.order_pay_way,co.course_total,co.create_time,co.order_pay_time, co.update_time,
      u.name,u.parent_name,u.sex,u.age,u.phone,
      cc.seat_id,cc.course_name,cc.course_cost
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from course_order
        where order_id = #{orderId,jdbcType=BIGINT}
    </select>
    <select id="selectByOrderNo" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from course_order
        where order_no = #{orderNo,jdbcType=VARCHAR}
    </select>
    <select id="findListByCondition" resultMap="UnionResultMap" parameterType="com.simon.basics.model.CourseOrder">
        select
        <include refid="Union_Column_List"/>
        <if test="accountId != null">
            ,IF(co.order_status='1',IFNULL(cr.roster_id,FALSE),NULL) AS chooseSeat
        </if>
        from course_order co
        INNER JOIN `user` u ON co.account_id=u.account_id
        INNER JOIN class_course cc ON co.course_id=cc.course_id
        <if test="accountId != null">
            LEFT JOIN course_roster cr ON co.course_id = cr.course_id AND cr.account_id = #{accountId,jdbcType=BIGINT}
        </if>
        <where>
            <if test="date != null" >
                <foreach collection="date" item="d" separator="or" open="(" close=")">
                    DATE_FORMAT(co.order_pay_time,'%Y/%m')= #{d}
                </foreach>
            </if>
            <if test="orderId != null">
                AND co.order_id=#{orderId,jdbcType=BIGINT}
            </if>
            <if test="orderNo != null">
                AND co.order_no=#{orderNo,jdbcType=VARCHAR}
            </if>
            <if test="courseId != null">
                AND co.course_id=#{courseId,jdbcType=BIGINT}
            </if>
            <if test="accountId != null">
                AND co.account_id=#{accountId,jdbcType=BIGINT}
            </if>
            <if test="orderStatus != null">
                AND co.order_status=#{orderStatus,jdbcType=CHAR}
            </if>
            <if test="orderCost != null">
                AND co.order_cost=#{orderCost,jdbcType=DECIMAL}
            </if>
        </where>
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from course_order
    where order_id = #{orderId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.simon.basics.model.CourseOrder">
    insert into course_order (order_id, order_no, course_id, 
      account_id, order_status, order_cost, 
      order_pay_status,order_pay_way, create_time,order_pay_time, update_time
      )
    values (#{orderId,jdbcType=BIGINT}, #{orderNo,jdbcType=VARCHAR}, #{courseId,jdbcType=BIGINT}, 
      #{accountId,jdbcType=BIGINT}, #{orderStatus,jdbcType=CHAR}, #{orderCost,jdbcType=DECIMAL}, 
      #{orderPayStatus,jdbcType=CHAR},#{orderPayWay,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},#{orderPayTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.simon.basics.model.CourseOrder" useGeneratedKeys="true"
            keyProperty="orderId">
        insert into course_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="courseTotal != null">
                course_total,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="orderNo != null">
                order_no,
            </if>
            <if test="courseId != null">
                course_id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="orderStatus != null">
                order_status,
            </if>
            <if test="orderCost != null">
                order_cost,
            </if>
            <if test="orderPayStatus != null">
                order_pay_status,
            </if>
            <if test="orderPayWay != null">
                order_pay_way,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="orderPayTime != null">
                order_pay_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="courseTotal != null">
                #{courseTotal,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=BIGINT},
            </if>
            <if test="orderNo != null">
                #{orderNo,jdbcType=VARCHAR},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                #{accountId,jdbcType=BIGINT},
            </if>
            <if test="orderStatus != null">
                #{orderStatus,jdbcType=CHAR},
            </if>
            <if test="orderCost != null">
                #{orderCost,jdbcType=DECIMAL},
            </if>
            <if test="orderPayStatus != null">
                #{orderPayStatus,jdbcType=CHAR},
            </if>
            <if test="orderPayWay != null">
                #{orderPayWay,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderPayTime != null">
                #{orderPayTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.simon.basics.model.CourseOrder">
        update course_order
        <set>
            <if test="orderNo != null">
                order_no = #{orderNo,jdbcType=VARCHAR},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=BIGINT},
            </if>
            <if test="orderStatus != null">
                order_status = #{orderStatus,jdbcType=CHAR},
            </if>
            <if test="orderCost != null">
                order_cost = #{orderCost,jdbcType=DECIMAL},
            </if>
            <if test="orderPayStatus != null">
                order_pay_status = #{orderPayStatus,jdbcType=CHAR},
            </if>
            <if test="orderPayWay != null">
                order_pay_way = #{orderPayWay,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="orderPayTime != null">
                order_pay_time = #{orderPayTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where order_id = #{orderId,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.simon.basics.model.CourseOrder">
    update course_order
    set order_no = #{orderNo,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      order_status = #{orderStatus,jdbcType=CHAR},
      order_cost = #{orderCost,jdbcType=DECIMAL},
      order_pay_status = #{orderPayStatus,jdbcType=CHAR},
      order_pay_way = #{orderPayWay,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      order_pay_time = #{orderPayTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
</mapper>