<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simon.basics.dao.ClassCourseMapper">
    <resultMap id="BaseResultMap" type="com.simon.basics.model.ClassCourse">
        <id column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="seat_id" property="seatId" jdbcType="BIGINT"/>
        <result column="account_id" property="accountId" jdbcType="BIGINT"/>
        <result column="type_id" property="typeId" jdbcType="BIGINT"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="course_cost" property="courseCost" jdbcType="DOUBLE"/>
        <result column="course_start_time" property="courseStartTime" jdbcType="TIMESTAMP"/>
        <result column="course_end_time" property="courseEndTime" jdbcType="TIMESTAMP"/>
        <result column="course_status" property="courseStatus" jdbcType="CHAR"/>
        <result column="course_current" property="courseCurrent" jdbcType="INTEGER"/>
        <result column="course_total" property="courseTotal" jdbcType="INTEGER"/>
        <result column="deleted" property="deleted" jdbcType="BIT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.simon.basics.model.ClassCourseWithBLOBs" extends="BaseResultMap">
        <result column="course_abstract" property="courseAbstract" jdbcType="LONGVARCHAR"/>
        <result column="course_remark" property="courseRemark" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <resultMap id="UnionMapResult" type="com.simon.basics.model.ClassCourseWithBLOBs" extends="ResultMapWithBLOBs">
        <result column="bought" property="bought" jdbcType="BIT"/>
        <association property="user" javaType="com.simon.basics.model.User">
            <id column="user_id" property="userId" jdbcType="BIGINT"/>
            <result column="account_id" property="accountId" jdbcType="BIGINT"/>
            <result column="name" property="name" jdbcType="VARCHAR"/>
            <result column="sex" property="sex" jdbcType="CHAR"/>
            <result column="age" property="age" jdbcType="INTEGER"/>
            <result column="phone" property="phone" jdbcType="VARCHAR"/>
            <result column="address" property="address" jdbcType="VARCHAR"/>
            <result column="teacher_charge_type" property="teacherChargeType" jdbcType="CHAR"/>
            <result column="average_hour" property="averageHour" jdbcType="DECIMAL"/>
            <result column="percentage" property="percentage" jdbcType="DECIMAL"/>
            <result column="exceed_num" property="exceedNum" jdbcType="INTEGER"/>
            <result column="average_hour_cost" property="averageHourCost" jdbcType="DECIMAL"/>
            <result column="remark" property="remark" jdbcType="VARCHAR"/>
        </association>

        <association property="seatLayout" javaType="com.simon.basics.model.SeatLayout">
            <id column="seat_id" property="seatId" jdbcType="BIGINT"/>
            <result column="seat_left" property="seatLeft" jdbcType="INTEGER"/>
            <result column="seat_mid" property="seatMid" jdbcType="INTEGER"/>
            <result column="seat_right" property="seatRight" jdbcType="INTEGER"/>
            <result column="seat_rows" property="seatRows" jdbcType="INTEGER"/>
            <result column="seat_layout_deleted" property="deleted" jdbcType="BIT"/>
        </association>
        <association property="courseType" javaType="com.simon.basics.model.CourseType">
            <id column="type_id" property="typeId" jdbcType="BIGINT"/>
            <result column="type_name" property="typeName" jdbcType="VARCHAR"/>
            <result column="type_series" property="typeSeries" jdbcType="BIGINT"/>
            <result column="course_type_deleted" property="deleted" jdbcType="BIT"/>
        </association>
    </resultMap>
    <sql id="Base_Column_List">
    course_id, seat_id, account_id, type_id, course_name, course_cost, course_start_time, 
    course_end_time, course_status, deleted, create_time, update_time
  </sql>
    <sql id="Blob_Column_List">
    course_abstract, course_remark
  </sql>
    <sql id="Union_Column_List">
      cc.course_id,cc.course_name, cc.course_cost,cc.course_status,cc.course_current,cc.course_total,cc.course_start_time,cc.course_end_time,cc.course_abstract, cc.course_remark,
      sl.seat_id, sl.seat_left, sl.seat_mid, sl.seat_right, sl.seat_rows, sl.deleted AS seat_layout_deleted,
      u.user_id,u.account_id, u.name, u.sex, u.age, u.phone, u.address,u.remark,u.average_hour_cost,u.exceed_num,u.percentage,u.average_hour,u.teacher_charge_type,
      ct.type_id, ct.type_name, ct.type_series, ct.deleted AS course_type_deleted
  </sql>
    <select id="selectByPrimaryKey" resultMap="UnionMapResult">
        select
        <include refid="Union_Column_List"/>
        <if test="studentId != null">
            ,IFNULL(co.order_id,FALSE ) AS bought
        </if>
        from class_course cc
        JOIN seat_layout sl ON cc.seat_id=sl.seat_id
        JOIN user u ON u.account_id=cc.account_id
        JOIN course_type ct ON ct.type_id=cc.type_id
        <if test="studentId != null">
            LEFT JOIN course_order co ON cc.course_id=co.course_id AND co.account_id = #{studentId,jdbcType=BIGINT} AND
            co.order_status = '1'
        </if>
        where cc.course_id = #{courseId,jdbcType=BIGINT}
        <if test="accountId != null">
            AND cc.account_id = #{accountId,jdbcType=BIGINT}
        </if>
    </select>

    <select id="findListByCondition" resultMap="UnionMapResult" parameterType="com.simon.basics.model.ClassCourse">
        select
        <include refid="Union_Column_List"/>
        <if test="classCourse.accountId != null">
            ,IFNULL(co.order_id,FALSE ) AS bought
        </if>
        from class_course cc
        JOIN seat_layout sl ON cc.seat_id=sl.seat_id
        JOIN user u ON u.account_id=cc.account_id
        JOIN course_type ct ON ct.type_id=cc.type_id
        <if test="classCourse.accountId != null">
            LEFT JOIN course_order co ON cc.course_id=co.course_id AND co.account_id = #{classCourse.accountId,jdbcType=BIGINT} AND
            co.order_status = '1'
        </if>
        <where>
            <if test="classCourse.accountId != null and bought==1">
                AND co.order_id IS NOT NULL
            </if>
            <if test="classCourse.accountId != null and bought==0">
                AND co.order_id IS NULL
            </if>
            <if test="classCourse.seatId != null">
                AND cc.seat_id = #{classCourse.seatId,jdbcType=BIGINT}
            </if>
            <if test="classCourse.typeId != null">
                AND cc.type_id = #{classCourse.typeId,jdbcType=BIGINT}
            </if>
            <if test="teacherId != null">
                AND cc.account_id = #{teacherId,jdbcType=BIGINT}
            </if>
            <if test="classCourse.courseName != null">
                AND cc.course_name = #{classCourse.courseName,jdbcType=VARCHAR}
            </if>
            <if test="classCourse.courseCost != null">
                AND cc.course_cost = #{classCourse.courseCost,jdbcType=DOUBLE}
            </if>
            <if test="classCourse.courseStartTime != null">
                AND cc.course_start_time = #{classCourse.courseStartTime,jdbcType=TIMESTAMP}
            </if>
            <if test="classCourse.courseEndTime != null">
                AND cc.course_end_time = #{classCourse.courseEndTime,jdbcType=TIMESTAMP}
            </if>
            <if test="classCourse.courseStatus != null">
                AND cc.course_status = #{classCourse.courseStatus,jdbcType=CHAR}
            </if>
            <if test="classCourse.deleted != null">
                AND cc.deleted = #{classCourse.deleted,jdbcType=BIT}
            </if>
            <if test="classCourse.createTime != null">
                AND cc.create_time = #{classCourse.createTime,jdbcType=TIMESTAMP}
            </if>
            <if test="classCourse.updateTime != null">
                AND cc.update_time = #{classCourse.updateTime,jdbcType=TIMESTAMP}
            </if>
            <if test="classCourse.courseAbstract != null">
                AND cc.course_abstract = #{classCourse.courseAbstract,jdbcType=LONGVARCHAR}
            </if>
            <if test="classCourse.courseRemark != null">
                AND cc.course_remark = #{classCourse.courseRemark,jdbcType=LONGVARCHAR}
            </if>
        </where>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from class_course
    where course_id = #{courseId,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.simon.basics.model.ClassCourseWithBLOBs">
    insert into class_course (course_id, seat_id, account_id, 
      type_id, course_name, course_cost, 
      course_start_time, course_end_time, course_status, 
      deleted, create_time, update_time, 
      course_abstract, course_remark)
    values (#{courseId,jdbcType=BIGINT}, #{seatId,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, 
      #{typeId,jdbcType=BIGINT}, #{courseName,jdbcType=VARCHAR}, #{courseCost,jdbcType=DOUBLE}, 
      #{courseStartTime,jdbcType=TIMESTAMP}, #{courseEndTime,jdbcType=TIMESTAMP}, #{courseStatus,jdbcType=CHAR}, 
      #{deleted,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{courseAbstract,jdbcType=LONGVARCHAR}, #{courseRemark,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.simon.basics.model.ClassCourseWithBLOBs" keyProperty="courseId" useGeneratedKeys="true">
        insert into class_course
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="courseId != null">
                course_id,
            </if>
            <if test="seatId != null">
                seat_id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="courseTotal != null">
                course_total,
            </if>
            <if test="courseName != null">
                course_name,
            </if>
            <if test="courseCost != null">
                course_cost,
            </if>
            <if test="courseStartTime != null">
                course_start_time,
            </if>
            <if test="courseEndTime != null">
                course_end_time,
            </if>
            <if test="courseStatus != null">
                course_status,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="courseAbstract != null">
                course_abstract,
            </if>
            <if test="courseRemark != null">
                course_remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="courseId != null">
                #{courseId,jdbcType=BIGINT},
            </if>
            <if test="seatId != null">
                #{seatId,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                #{accountId,jdbcType=BIGINT},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=BIGINT},
            </if>
            <if test="courseTotal != null">
                #{courseTotal,jdbcType=INTEGER},
            </if>
            <if test="courseName != null">
                #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="courseCost != null">
                #{courseCost,jdbcType=DOUBLE},
            </if>
            <if test="courseStartTime != null">
                #{courseStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseEndTime != null">
                #{courseEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseStatus != null">
                #{courseStatus,jdbcType=CHAR},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseAbstract != null">
                #{courseAbstract,jdbcType=LONGVARCHAR},
            </if>
            <if test="courseRemark != null">
                #{courseRemark,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeyAndAccountIdSelective" parameterType="com.simon.basics.model.ClassCourseWithBLOBs">
        update class_course
        <set>
            <if test="seatId != null">
                seat_id = #{seatId,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=BIGINT},
            </if>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=BIGINT},
            </if>
            <if test="courseName != null">
                course_name = #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="courseCost != null">
                course_cost = #{courseCost,jdbcType=DOUBLE},
            </if>
            <if test="courseStartTime != null">
                course_start_time = #{courseStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseEndTime != null">
                course_end_time = #{courseEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseStatus != null">
                course_status = #{courseStatus,jdbcType=CHAR},
            </if>
            <if test="courseCurrent != null">
                course_current = course_current+1,
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseAbstract != null">
                course_abstract = #{courseAbstract,jdbcType=LONGVARCHAR},
            </if>
            <if test="courseRemark != null">
                course_remark = #{courseRemark,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where course_id = #{courseId,jdbcType=BIGINT}
        <if test="accountId != null">
            and account_id = #{accountId,jdbcType=BIGINT}
        </if>
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.simon.basics.model.ClassCourseWithBLOBs">
    update class_course
    set seat_id = #{seatId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      type_id = #{typeId,jdbcType=BIGINT},
      course_name = #{courseName,jdbcType=VARCHAR},
      course_cost = #{courseCost,jdbcType=DOUBLE},
      course_start_time = #{courseStartTime,jdbcType=TIMESTAMP},
      course_end_time = #{courseEndTime,jdbcType=TIMESTAMP},
      course_status = #{courseStatus,jdbcType=CHAR},
      deleted = #{deleted,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      course_abstract = #{courseAbstract,jdbcType=LONGVARCHAR},
      course_remark = #{courseRemark,jdbcType=LONGVARCHAR}
    where course_id = #{courseId,jdbcType=BIGINT}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.simon.basics.model.ClassCourse">
    update class_course
    set seat_id = #{seatId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      type_id = #{typeId,jdbcType=BIGINT},
      course_name = #{courseName,jdbcType=VARCHAR},
      course_cost = #{courseCost,jdbcType=DOUBLE},
      course_start_time = #{courseStartTime,jdbcType=TIMESTAMP},
      course_end_time = #{courseEndTime,jdbcType=TIMESTAMP},
      course_status = #{courseStatus,jdbcType=CHAR},
      deleted = #{deleted,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where course_id = #{courseId,jdbcType=BIGINT}
  </update>
    <update id="updateStatus">
    update class_course
    set
      deleted = #{deleted,jdbcType=BIT}
    where course_id = #{courseId,jdbcType=BIGINT}
  </update>
    <select id="getAttendanceList" resultType="com.simon.basics.model.CourseRosterAttendance">
    SELECT
      cr.`course_id` AS courseId,
      cr.`roster_seat_x` AS rosterSeatX,
      cr.`roster_seat_y` AS rosterSeatY,
      ra.`attend_type` AS attendType,
      u.`account_id` AS accountId,
      u.`name`,
      u.`parent_name` AS parentName,
      u.`sex`,
      u.`age`,
      u.`phone`,
      ra.`create_time` AS create_time,
      IFNULL(ra.attendance_id, FALSE) AS isAttendance
    FROM course_roster cr INNER JOIN `user` u ON cr.account_id = u.account_id
      LEFT JOIN roster_attendance ra
        ON cr.course_id = ra.course_id AND cr.account_id = ra.account_id AND ra.attend_section_num = #{courseCurrent} AND ra.attend_type='1'
    WHERE cr.course_id = #{courseId,jdbcType=BIGINT}
  </select>

    <select id="getAdditionalAttendanceList" resultType="com.simon.basics.model.CourseRosterAttendance">
    SELECT
      #{courseId,jdbcType=BIGINT} AS courseId,
      ra.`additional_seat_x` AS rosterSeatX,
      ra.`additional_seat_y` AS rosterSeatY,
      ra.`attend_type` AS attendType,
      u.`account_id`         AS accountId,
      u.`name`,
      u.`parent_name`        AS parentName,
      u.`sex`,
      u.`age`,
      u.`phone`,
      ra.`create_time`       AS createTime
    FROM roster_attendance ra LEFT JOIN `user` u ON ra.account_id = u.account_id
    WHERE ra.attend_type='3' AND ra.course_id = #{courseId,jdbcType=BIGINT} AND ra.attend_section_num =  #{courseCurrent}
  </select>

</mapper>